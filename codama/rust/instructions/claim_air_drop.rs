//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
pub struct ClaimAirDrop {
            /// Who is claiming the tokens.

    
              
          pub claimant: solana_program::pubkey::Pubkey,
          
              
          pub claimant_token_account: solana_program::pubkey::Pubkey,
          
              
          pub merkle_air_dropper_source: solana_program::pubkey::Pubkey,
          
              
          pub merkle_air_dropper_source_token_account: solana_program::pubkey::Pubkey,
          
              
          pub air_drop_status: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub token_program: solana_program::pubkey::Pubkey,
          
              
          pub mint: solana_program::pubkey::Pubkey,
          
              
          pub associated_token_program: solana_program::pubkey::Pubkey,
          
              
          pub rent: solana_program::pubkey::Pubkey,
      }

impl ClaimAirDrop {
  pub fn instruction(&self, args: ClaimAirDropInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: ClaimAirDropInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.claimant,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.claimant_token_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.merkle_air_dropper_source,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.merkle_air_dropper_source_token_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.air_drop_status,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = ClaimAirDropInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::MERKLE_AIR_DROPPER_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ClaimAirDropInstructionData {
            discriminator: [u8; 8],
                              }

impl ClaimAirDropInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [59, 160, 181, 88, 128, 119, 58, 53],
                                                                          }
  }
}

impl Default for ClaimAirDropInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ClaimAirDropInstructionArgs {
                  pub index: u64,
                pub amount: u64,
                pub proof: Vec<u8>,
                pub leaves_to_prove: Vec<Vec<u8>>,
      }


/// Instruction builder for `ClaimAirDrop`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` claimant
                ///   1. `[writable]` claimant_token_account
                ///   2. `[writable]` merkle_air_dropper_source
                ///   3. `[writable]` merkle_air_dropper_source_token_account
                ///   4. `[writable]` air_drop_status
                ///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
          ///   7. `[]` mint
          ///   8. `[]` associated_token_program
                ///   9. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct ClaimAirDropBuilder {
            claimant: Option<solana_program::pubkey::Pubkey>,
                claimant_token_account: Option<solana_program::pubkey::Pubkey>,
                merkle_air_dropper_source: Option<solana_program::pubkey::Pubkey>,
                merkle_air_dropper_source_token_account: Option<solana_program::pubkey::Pubkey>,
                air_drop_status: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                token_program: Option<solana_program::pubkey::Pubkey>,
                mint: Option<solana_program::pubkey::Pubkey>,
                associated_token_program: Option<solana_program::pubkey::Pubkey>,
                rent: Option<solana_program::pubkey::Pubkey>,
                        index: Option<u64>,
                amount: Option<u64>,
                proof: Option<Vec<u8>>,
                leaves_to_prove: Option<Vec<Vec<u8>>>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ClaimAirDropBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// Who is claiming the tokens.
#[inline(always)]
    pub fn claimant(&mut self, claimant: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.claimant = Some(claimant);
                    self
    }
            #[inline(always)]
    pub fn claimant_token_account(&mut self, claimant_token_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.claimant_token_account = Some(claimant_token_account);
                    self
    }
            #[inline(always)]
    pub fn merkle_air_dropper_source(&mut self, merkle_air_dropper_source: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.merkle_air_dropper_source = Some(merkle_air_dropper_source);
                    self
    }
            #[inline(always)]
    pub fn merkle_air_dropper_source_token_account(&mut self, merkle_air_dropper_source_token_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.merkle_air_dropper_source_token_account = Some(merkle_air_dropper_source_token_account);
                    self
    }
            #[inline(always)]
    pub fn air_drop_status(&mut self, air_drop_status: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.air_drop_status = Some(air_drop_status);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.mint = Some(mint);
                    self
    }
            #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.associated_token_program = Some(associated_token_program);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
                    #[inline(always)]
      pub fn index(&mut self, index: u64) -> &mut Self {
        self.index = Some(index);
        self
      }
                #[inline(always)]
      pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
      }
                #[inline(always)]
      pub fn proof(&mut self, proof: Vec<u8>) -> &mut Self {
        self.proof = Some(proof);
        self
      }
                #[inline(always)]
      pub fn leaves_to_prove(&mut self, leaves_to_prove: Vec<Vec<u8>>) -> &mut Self {
        self.leaves_to_prove = Some(leaves_to_prove);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = ClaimAirDrop {
                              claimant: self.claimant.expect("claimant is not set"),
                                        claimant_token_account: self.claimant_token_account.expect("claimant_token_account is not set"),
                                        merkle_air_dropper_source: self.merkle_air_dropper_source.expect("merkle_air_dropper_source is not set"),
                                        merkle_air_dropper_source_token_account: self.merkle_air_dropper_source_token_account.expect("merkle_air_dropper_source_token_account is not set"),
                                        air_drop_status: self.air_drop_status.expect("air_drop_status is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        token_program: self.token_program.unwrap_or(solana_program::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        mint: self.mint.expect("mint is not set"),
                                        associated_token_program: self.associated_token_program.expect("associated_token_program is not set"),
                                        rent: self.rent.unwrap_or(solana_program::pubkey!("SysvarRent111111111111111111111111111111111")),
                      };
          let args = ClaimAirDropInstructionArgs {
                                                              index: self.index.clone().expect("index is not set"),
                                                                  amount: self.amount.clone().expect("amount is not set"),
                                                                  proof: self.proof.clone().expect("proof is not set"),
                                                                  leaves_to_prove: self.leaves_to_prove.clone().expect("leaves_to_prove is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `claim_air_drop` CPI accounts.
  pub struct ClaimAirDropCpiAccounts<'a, 'b> {
                  /// Who is claiming the tokens.

      
                    
              pub claimant: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub claimant_token_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub merkle_air_dropper_source: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub merkle_air_dropper_source_token_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub air_drop_status: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `claim_air_drop` CPI instruction.
pub struct ClaimAirDropCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
            /// Who is claiming the tokens.

    
              
          pub claimant: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub claimant_token_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub merkle_air_dropper_source: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub merkle_air_dropper_source_token_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub air_drop_status: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: ClaimAirDropInstructionArgs,
  }

impl<'a, 'b> ClaimAirDropCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: ClaimAirDropCpiAccounts<'a, 'b>,
              args: ClaimAirDropInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              claimant: accounts.claimant,
              claimant_token_account: accounts.claimant_token_account,
              merkle_air_dropper_source: accounts.merkle_air_dropper_source,
              merkle_air_dropper_source_token_account: accounts.merkle_air_dropper_source_token_account,
              air_drop_status: accounts.air_drop_status,
              system_program: accounts.system_program,
              token_program: accounts.token_program,
              mint: accounts.mint,
              associated_token_program: accounts.associated_token_program,
              rent: accounts.rent,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.claimant.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.claimant_token_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.merkle_air_dropper_source.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.merkle_air_dropper_source_token_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.air_drop_status.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = ClaimAirDropInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::MERKLE_AIR_DROPPER_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.claimant.clone());
                        account_infos.push(self.claimant_token_account.clone());
                        account_infos.push(self.merkle_air_dropper_source.clone());
                        account_infos.push(self.merkle_air_dropper_source_token_account.clone());
                        account_infos.push(self.air_drop_status.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.mint.clone());
                        account_infos.push(self.associated_token_program.clone());
                        account_infos.push(self.rent.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ClaimAirDrop` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` claimant
                ///   1. `[writable]` claimant_token_account
                ///   2. `[writable]` merkle_air_dropper_source
                ///   3. `[writable]` merkle_air_dropper_source_token_account
                ///   4. `[writable]` air_drop_status
          ///   5. `[]` system_program
          ///   6. `[]` token_program
          ///   7. `[]` mint
          ///   8. `[]` associated_token_program
          ///   9. `[]` rent
#[derive(Clone, Debug)]
pub struct ClaimAirDropCpiBuilder<'a, 'b> {
  instruction: Box<ClaimAirDropCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimAirDropCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ClaimAirDropCpiBuilderInstruction {
      __program: program,
              claimant: None,
              claimant_token_account: None,
              merkle_air_dropper_source: None,
              merkle_air_dropper_source_token_account: None,
              air_drop_status: None,
              system_program: None,
              token_program: None,
              mint: None,
              associated_token_program: None,
              rent: None,
                                            index: None,
                                amount: None,
                                proof: None,
                                leaves_to_prove: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// Who is claiming the tokens.
#[inline(always)]
    pub fn claimant(&mut self, claimant: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.claimant = Some(claimant);
                    self
    }
      #[inline(always)]
    pub fn claimant_token_account(&mut self, claimant_token_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.claimant_token_account = Some(claimant_token_account);
                    self
    }
      #[inline(always)]
    pub fn merkle_air_dropper_source(&mut self, merkle_air_dropper_source: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.merkle_air_dropper_source = Some(merkle_air_dropper_source);
                    self
    }
      #[inline(always)]
    pub fn merkle_air_dropper_source_token_account(&mut self, merkle_air_dropper_source_token_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.merkle_air_dropper_source_token_account = Some(merkle_air_dropper_source_token_account);
                    self
    }
      #[inline(always)]
    pub fn air_drop_status(&mut self, air_drop_status: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.air_drop_status = Some(air_drop_status);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.mint = Some(mint);
                    self
    }
      #[inline(always)]
    pub fn associated_token_program(&mut self, associated_token_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.associated_token_program = Some(associated_token_program);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
                    #[inline(always)]
      pub fn index(&mut self, index: u64) -> &mut Self {
        self.instruction.index = Some(index);
        self
      }
                #[inline(always)]
      pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
      }
                #[inline(always)]
      pub fn proof(&mut self, proof: Vec<u8>) -> &mut Self {
        self.instruction.proof = Some(proof);
        self
      }
                #[inline(always)]
      pub fn leaves_to_prove(&mut self, leaves_to_prove: Vec<Vec<u8>>) -> &mut Self {
        self.instruction.leaves_to_prove = Some(leaves_to_prove);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = ClaimAirDropInstructionArgs {
                                                              index: self.instruction.index.clone().expect("index is not set"),
                                                                  amount: self.instruction.amount.clone().expect("amount is not set"),
                                                                  proof: self.instruction.proof.clone().expect("proof is not set"),
                                                                  leaves_to_prove: self.instruction.leaves_to_prove.clone().expect("leaves_to_prove is not set"),
                                    };
        let instruction = ClaimAirDropCpi {
        __program: self.instruction.__program,
                  
          claimant: self.instruction.claimant.expect("claimant is not set"),
                  
          claimant_token_account: self.instruction.claimant_token_account.expect("claimant_token_account is not set"),
                  
          merkle_air_dropper_source: self.instruction.merkle_air_dropper_source.expect("merkle_air_dropper_source is not set"),
                  
          merkle_air_dropper_source_token_account: self.instruction.merkle_air_dropper_source_token_account.expect("merkle_air_dropper_source_token_account is not set"),
                  
          air_drop_status: self.instruction.air_drop_status.expect("air_drop_status is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          mint: self.instruction.mint.expect("mint is not set"),
                  
          associated_token_program: self.instruction.associated_token_program.expect("associated_token_program is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ClaimAirDropCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            claimant: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                claimant_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                merkle_air_dropper_source: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                merkle_air_dropper_source_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                air_drop_status: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        index: Option<u64>,
                amount: Option<u64>,
                proof: Option<Vec<u8>>,
                leaves_to_prove: Option<Vec<Vec<u8>>>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

