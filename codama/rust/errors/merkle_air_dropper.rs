//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum MerkleAirDropperError {
    /// 6000 - Numerical Overflow
    #[error("Numerical Overflow")]
    NumericalOverflow = 0x1770,
    /// 6001 - Cannot Validate Proof.
    #[error("Cannot Validate Proof.")]
    CannotValidateProof = 0x1771,
    /// 6002 - Invalid Merkle proof.
    #[error("Invalid Merkle proof.")]
    InvalidProof = 0x1772,
    /// 6003 - Invalid Proof Length.
    #[error("Invalid Proof Length.")]
    InvalidProofLength = 0x1773,
    /// 6004 - Drop already claimed.
    #[error("Drop already claimed.")]
    DropAlreadyClaimed = 0x1774,
    /// 6005 - Exceeded maximum claim amount.
    #[error("Exceeded maximum claim amount.")]
    ExceededMaxClaim = 0x1775,
    /// 6006 - Exceeded maximum number of claimed nodes.
    #[error("Exceeded maximum number of claimed nodes.")]
    ExceededMaxNumNodes = 0x1776,
    /// 6007 - Account is not authorized to execute this instruction
    #[error("Account is not authorized to execute this instruction")]
    Unauthorized = 0x1777,
    /// 6008 - Token account owner did not match intended owner
    #[error("Token account owner did not match intended owner")]
    OwnerMismatch = 0x1778,
    /// 6009 - Bad math
    #[error("Bad math")]
    BadMath = 0x1779,
}

impl solana_program::program_error::PrintProgramError for MerkleAirDropperError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

