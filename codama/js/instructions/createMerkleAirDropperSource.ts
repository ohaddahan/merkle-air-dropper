/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { MERKLE_AIR_DROPPER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_MERKLE_AIR_DROPPER_SOURCE_DISCRIMINATOR = new Uint8Array([
  8, 61, 14, 197, 54, 52, 183, 61,
]);

export function getCreateMerkleAirDropperSourceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_MERKLE_AIR_DROPPER_SOURCE_DISCRIMINATOR
  );
}

export type CreateMerkleAirDropperSourceInstruction<
  TProgram extends string = typeof MERKLE_AIR_DROPPER_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountSignerTokenAccount extends string | IAccountMeta<string> = string,
  TAccountMerkleAirDropperSource extends string | IAccountMeta<string> = string,
  TAccountMerkleAirDropperSourceTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountSignerTokenAccount extends string
        ? WritableAccount<TAccountSignerTokenAccount>
        : TAccountSignerTokenAccount,
      TAccountMerkleAirDropperSource extends string
        ? WritableAccount<TAccountMerkleAirDropperSource>
        : TAccountMerkleAirDropperSource,
      TAccountMerkleAirDropperSourceTokenAccount extends string
        ? WritableAccount<TAccountMerkleAirDropperSourceTokenAccount>
        : TAccountMerkleAirDropperSourceTokenAccount,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type CreateMerkleAirDropperSourceInstructionData = {
  discriminator: ReadonlyUint8Array;
  merkleRoot: ReadonlyUint8Array;
  seed: bigint;
  maxTotalClaim: bigint;
  maxNumNodes: bigint;
  leavesLen: bigint;
};

export type CreateMerkleAirDropperSourceInstructionDataArgs = {
  merkleRoot: ReadonlyUint8Array;
  seed: number | bigint;
  maxTotalClaim: number | bigint;
  maxNumNodes: number | bigint;
  leavesLen: number | bigint;
};

export function getCreateMerkleAirDropperSourceInstructionDataEncoder(): Encoder<CreateMerkleAirDropperSourceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['merkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
      ['seed', getU64Encoder()],
      ['maxTotalClaim', getU64Encoder()],
      ['maxNumNodes', getU64Encoder()],
      ['leavesLen', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_MERKLE_AIR_DROPPER_SOURCE_DISCRIMINATOR,
    })
  );
}

export function getCreateMerkleAirDropperSourceInstructionDataDecoder(): Decoder<CreateMerkleAirDropperSourceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['merkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['seed', getU64Decoder()],
    ['maxTotalClaim', getU64Decoder()],
    ['maxNumNodes', getU64Decoder()],
    ['leavesLen', getU64Decoder()],
  ]);
}

export function getCreateMerkleAirDropperSourceInstructionDataCodec(): Codec<
  CreateMerkleAirDropperSourceInstructionDataArgs,
  CreateMerkleAirDropperSourceInstructionData
> {
  return combineCodec(
    getCreateMerkleAirDropperSourceInstructionDataEncoder(),
    getCreateMerkleAirDropperSourceInstructionDataDecoder()
  );
}

export type CreateMerkleAirDropperSourceInput<
  TAccountSigner extends string = string,
  TAccountSignerTokenAccount extends string = string,
  TAccountMerkleAirDropperSource extends string = string,
  TAccountMerkleAirDropperSourceTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  signerTokenAccount: Address<TAccountSignerTokenAccount>;
  merkleAirDropperSource: Address<TAccountMerkleAirDropperSource>;
  merkleAirDropperSourceTokenAccount: Address<TAccountMerkleAirDropperSourceTokenAccount>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  merkleRoot: CreateMerkleAirDropperSourceInstructionDataArgs['merkleRoot'];
  seed: CreateMerkleAirDropperSourceInstructionDataArgs['seed'];
  maxTotalClaim: CreateMerkleAirDropperSourceInstructionDataArgs['maxTotalClaim'];
  maxNumNodes: CreateMerkleAirDropperSourceInstructionDataArgs['maxNumNodes'];
  leavesLen: CreateMerkleAirDropperSourceInstructionDataArgs['leavesLen'];
};

export function getCreateMerkleAirDropperSourceInstruction<
  TAccountSigner extends string,
  TAccountSignerTokenAccount extends string,
  TAccountMerkleAirDropperSource extends string,
  TAccountMerkleAirDropperSourceTokenAccount extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof MERKLE_AIR_DROPPER_PROGRAM_ADDRESS,
>(
  input: CreateMerkleAirDropperSourceInput<
    TAccountSigner,
    TAccountSignerTokenAccount,
    TAccountMerkleAirDropperSource,
    TAccountMerkleAirDropperSourceTokenAccount,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): CreateMerkleAirDropperSourceInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountSignerTokenAccount,
  TAccountMerkleAirDropperSource,
  TAccountMerkleAirDropperSourceTokenAccount,
  TAccountMint,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MERKLE_AIR_DROPPER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    signerTokenAccount: {
      value: input.signerTokenAccount ?? null,
      isWritable: true,
    },
    merkleAirDropperSource: {
      value: input.merkleAirDropperSource ?? null,
      isWritable: true,
    },
    merkleAirDropperSourceTokenAccount: {
      value: input.merkleAirDropperSourceTokenAccount ?? null,
      isWritable: true,
    },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.signerTokenAccount),
      getAccountMeta(accounts.merkleAirDropperSource),
      getAccountMeta(accounts.merkleAirDropperSourceTokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getCreateMerkleAirDropperSourceInstructionDataEncoder().encode(
      args as CreateMerkleAirDropperSourceInstructionDataArgs
    ),
  } as CreateMerkleAirDropperSourceInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountSignerTokenAccount,
    TAccountMerkleAirDropperSource,
    TAccountMerkleAirDropperSourceTokenAccount,
    TAccountMint,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedCreateMerkleAirDropperSourceInstruction<
  TProgram extends string = typeof MERKLE_AIR_DROPPER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    signerTokenAccount: TAccountMetas[1];
    merkleAirDropperSource: TAccountMetas[2];
    merkleAirDropperSourceTokenAccount: TAccountMetas[3];
    mint: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    associatedTokenProgram: TAccountMetas[7];
    rent: TAccountMetas[8];
  };
  data: CreateMerkleAirDropperSourceInstructionData;
};

export function parseCreateMerkleAirDropperSourceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateMerkleAirDropperSourceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      signerTokenAccount: getNextAccount(),
      merkleAirDropperSource: getNextAccount(),
      merkleAirDropperSourceTokenAccount: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getCreateMerkleAirDropperSourceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
