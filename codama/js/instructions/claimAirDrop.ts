/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { MERKLE_AIR_DROPPER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLAIM_AIR_DROP_DISCRIMINATOR = new Uint8Array([
  59, 160, 181, 88, 128, 119, 58, 53,
]);

export function getClaimAirDropDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_AIR_DROP_DISCRIMINATOR
  );
}

export type ClaimAirDropInstruction<
  TProgram extends string = typeof MERKLE_AIR_DROPPER_PROGRAM_ADDRESS,
  TAccountClaimant extends string | IAccountMeta<string> = string,
  TAccountClaimantTokenAccount extends string | IAccountMeta<string> = string,
  TAccountMerkleAirDropperSource extends string | IAccountMeta<string> = string,
  TAccountMerkleAirDropperSourceTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountAirDropStatus extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountRent extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountClaimant extends string
        ? WritableSignerAccount<TAccountClaimant> &
            IAccountSignerMeta<TAccountClaimant>
        : TAccountClaimant,
      TAccountClaimantTokenAccount extends string
        ? WritableAccount<TAccountClaimantTokenAccount>
        : TAccountClaimantTokenAccount,
      TAccountMerkleAirDropperSource extends string
        ? WritableAccount<TAccountMerkleAirDropperSource>
        : TAccountMerkleAirDropperSource,
      TAccountMerkleAirDropperSourceTokenAccount extends string
        ? WritableAccount<TAccountMerkleAirDropperSourceTokenAccount>
        : TAccountMerkleAirDropperSourceTokenAccount,
      TAccountAirDropStatus extends string
        ? WritableAccount<TAccountAirDropStatus>
        : TAccountAirDropStatus,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimAirDropInstructionData = {
  discriminator: ReadonlyUint8Array;
  index: bigint;
  amount: bigint;
  proof: ReadonlyUint8Array;
  leavesToProve: Array<ReadonlyUint8Array>;
};

export type ClaimAirDropInstructionDataArgs = {
  index: number | bigint;
  amount: number | bigint;
  proof: ReadonlyUint8Array;
  leavesToProve: Array<ReadonlyUint8Array>;
};

export function getClaimAirDropInstructionDataEncoder(): Encoder<ClaimAirDropInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getU64Encoder()],
      ['amount', getU64Encoder()],
      ['proof', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      [
        'leavesToProve',
        getArrayEncoder(
          addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_AIR_DROP_DISCRIMINATOR })
  );
}

export function getClaimAirDropInstructionDataDecoder(): Decoder<ClaimAirDropInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getU64Decoder()],
    ['amount', getU64Decoder()],
    ['proof', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    [
      'leavesToProve',
      getArrayDecoder(addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())),
    ],
  ]);
}

export function getClaimAirDropInstructionDataCodec(): Codec<
  ClaimAirDropInstructionDataArgs,
  ClaimAirDropInstructionData
> {
  return combineCodec(
    getClaimAirDropInstructionDataEncoder(),
    getClaimAirDropInstructionDataDecoder()
  );
}

export type ClaimAirDropInput<
  TAccountClaimant extends string = string,
  TAccountClaimantTokenAccount extends string = string,
  TAccountMerkleAirDropperSource extends string = string,
  TAccountMerkleAirDropperSourceTokenAccount extends string = string,
  TAccountAirDropStatus extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountRent extends string = string,
> = {
  /** Who is claiming the tokens. */
  claimant: TransactionSigner<TAccountClaimant>;
  claimantTokenAccount: Address<TAccountClaimantTokenAccount>;
  merkleAirDropperSource: Address<TAccountMerkleAirDropperSource>;
  merkleAirDropperSourceTokenAccount: Address<TAccountMerkleAirDropperSourceTokenAccount>;
  airDropStatus: Address<TAccountAirDropStatus>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mint: Address<TAccountMint>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  rent?: Address<TAccountRent>;
  index: ClaimAirDropInstructionDataArgs['index'];
  amount: ClaimAirDropInstructionDataArgs['amount'];
  proof: ClaimAirDropInstructionDataArgs['proof'];
  leavesToProve: ClaimAirDropInstructionDataArgs['leavesToProve'];
};

export function getClaimAirDropInstruction<
  TAccountClaimant extends string,
  TAccountClaimantTokenAccount extends string,
  TAccountMerkleAirDropperSource extends string,
  TAccountMerkleAirDropperSourceTokenAccount extends string,
  TAccountAirDropStatus extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof MERKLE_AIR_DROPPER_PROGRAM_ADDRESS,
>(
  input: ClaimAirDropInput<
    TAccountClaimant,
    TAccountClaimantTokenAccount,
    TAccountMerkleAirDropperSource,
    TAccountMerkleAirDropperSourceTokenAccount,
    TAccountAirDropStatus,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountMint,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimAirDropInstruction<
  TProgramAddress,
  TAccountClaimant,
  TAccountClaimantTokenAccount,
  TAccountMerkleAirDropperSource,
  TAccountMerkleAirDropperSourceTokenAccount,
  TAccountAirDropStatus,
  TAccountSystemProgram,
  TAccountTokenProgram,
  TAccountMint,
  TAccountAssociatedTokenProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MERKLE_AIR_DROPPER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    claimant: { value: input.claimant ?? null, isWritable: true },
    claimantTokenAccount: {
      value: input.claimantTokenAccount ?? null,
      isWritable: true,
    },
    merkleAirDropperSource: {
      value: input.merkleAirDropperSource ?? null,
      isWritable: true,
    },
    merkleAirDropperSourceTokenAccount: {
      value: input.merkleAirDropperSourceTokenAccount ?? null,
      isWritable: true,
    },
    airDropStatus: { value: input.airDropStatus ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.claimant),
      getAccountMeta(accounts.claimantTokenAccount),
      getAccountMeta(accounts.merkleAirDropperSource),
      getAccountMeta(accounts.merkleAirDropperSourceTokenAccount),
      getAccountMeta(accounts.airDropStatus),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getClaimAirDropInstructionDataEncoder().encode(
      args as ClaimAirDropInstructionDataArgs
    ),
  } as ClaimAirDropInstruction<
    TProgramAddress,
    TAccountClaimant,
    TAccountClaimantTokenAccount,
    TAccountMerkleAirDropperSource,
    TAccountMerkleAirDropperSourceTokenAccount,
    TAccountAirDropStatus,
    TAccountSystemProgram,
    TAccountTokenProgram,
    TAccountMint,
    TAccountAssociatedTokenProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedClaimAirDropInstruction<
  TProgram extends string = typeof MERKLE_AIR_DROPPER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Who is claiming the tokens. */
    claimant: TAccountMetas[0];
    claimantTokenAccount: TAccountMetas[1];
    merkleAirDropperSource: TAccountMetas[2];
    merkleAirDropperSourceTokenAccount: TAccountMetas[3];
    airDropStatus: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    mint: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    rent: TAccountMetas[9];
  };
  data: ClaimAirDropInstructionData;
};

export function parseClaimAirDropInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimAirDropInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      claimant: getNextAccount(),
      claimantTokenAccount: getNextAccount(),
      merkleAirDropperSource: getNextAccount(),
      merkleAirDropperSourceTokenAccount: getNextAccount(),
      airDropStatus: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      mint: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getClaimAirDropInstructionDataDecoder().decode(instruction.data),
  };
}
