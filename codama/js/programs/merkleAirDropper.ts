/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedClaimAirDropInstruction,
  type ParsedCreateMerkleAirDropperSourceInstruction,
} from '../instructions';

export const MERKLE_AIR_DROPPER_PROGRAM_ADDRESS = '' as Address<''>;

export enum MerkleAirDropperAccount {
  AirDropStatus,
  MerkleAirDropperSource,
}

export function identifyMerkleAirDropperAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MerkleAirDropperAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 179, 91, 45, 210, 84, 85, 183])
      ),
      0
    )
  ) {
    return MerkleAirDropperAccount.AirDropStatus;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([157, 253, 195, 245, 131, 174, 254, 54])
      ),
      0
    )
  ) {
    return MerkleAirDropperAccount.MerkleAirDropperSource;
  }
  throw new Error(
    'The provided account could not be identified as a merkleAirDropper account.'
  );
}

export enum MerkleAirDropperInstruction {
  ClaimAirDrop,
  CreateMerkleAirDropperSource,
}

export function identifyMerkleAirDropperInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MerkleAirDropperInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 160, 181, 88, 128, 119, 58, 53])
      ),
      0
    )
  ) {
    return MerkleAirDropperInstruction.ClaimAirDrop;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([8, 61, 14, 197, 54, 52, 183, 61])
      ),
      0
    )
  ) {
    return MerkleAirDropperInstruction.CreateMerkleAirDropperSource;
  }
  throw new Error(
    'The provided instruction could not be identified as a merkleAirDropper instruction.'
  );
}

export type ParsedMerkleAirDropperInstruction<TProgram extends string = ''> =
  | ({
      instructionType: MerkleAirDropperInstruction.ClaimAirDrop;
    } & ParsedClaimAirDropInstruction<TProgram>)
  | ({
      instructionType: MerkleAirDropperInstruction.CreateMerkleAirDropperSource;
    } & ParsedCreateMerkleAirDropperSourceInstruction<TProgram>);
