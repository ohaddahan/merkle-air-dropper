/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const MERKLE_AIR_DROPPER_SOURCE_DISCRIMINATOR = new Uint8Array([
  157, 253, 195, 245, 131, 174, 254, 54,
]);

export function getMerkleAirDropperSourceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MERKLE_AIR_DROPPER_SOURCE_DISCRIMINATOR
  );
}

export type MerkleAirDropperSource = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  seed: bigint;
  signer: Address;
  merkleRoot: ReadonlyUint8Array;
  mint: Address;
  tokenAccount: Address;
  maxTotalClaim: bigint;
  maxNumNodes: bigint;
  totalAmountClaimed: bigint;
  numNodesClaimed: bigint;
  leavesLen: bigint;
};

export type MerkleAirDropperSourceArgs = {
  bump: number;
  seed: number | bigint;
  signer: Address;
  merkleRoot: ReadonlyUint8Array;
  mint: Address;
  tokenAccount: Address;
  maxTotalClaim: number | bigint;
  maxNumNodes: number | bigint;
  totalAmountClaimed: number | bigint;
  numNodesClaimed: number | bigint;
  leavesLen: number | bigint;
};

export function getMerkleAirDropperSourceEncoder(): Encoder<MerkleAirDropperSourceArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['seed', getU64Encoder()],
      ['signer', getAddressEncoder()],
      ['merkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
      ['mint', getAddressEncoder()],
      ['tokenAccount', getAddressEncoder()],
      ['maxTotalClaim', getU64Encoder()],
      ['maxNumNodes', getU64Encoder()],
      ['totalAmountClaimed', getU64Encoder()],
      ['numNodesClaimed', getU64Encoder()],
      ['leavesLen', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: MERKLE_AIR_DROPPER_SOURCE_DISCRIMINATOR,
    })
  );
}

export function getMerkleAirDropperSourceDecoder(): Decoder<MerkleAirDropperSource> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['seed', getU64Decoder()],
    ['signer', getAddressDecoder()],
    ['merkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['mint', getAddressDecoder()],
    ['tokenAccount', getAddressDecoder()],
    ['maxTotalClaim', getU64Decoder()],
    ['maxNumNodes', getU64Decoder()],
    ['totalAmountClaimed', getU64Decoder()],
    ['numNodesClaimed', getU64Decoder()],
    ['leavesLen', getU64Decoder()],
  ]);
}

export function getMerkleAirDropperSourceCodec(): Codec<
  MerkleAirDropperSourceArgs,
  MerkleAirDropperSource
> {
  return combineCodec(
    getMerkleAirDropperSourceEncoder(),
    getMerkleAirDropperSourceDecoder()
  );
}

export function decodeMerkleAirDropperSource<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MerkleAirDropperSource, TAddress>;
export function decodeMerkleAirDropperSource<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MerkleAirDropperSource, TAddress>;
export function decodeMerkleAirDropperSource<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<MerkleAirDropperSource, TAddress>
  | MaybeAccount<MerkleAirDropperSource, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMerkleAirDropperSourceDecoder()
  );
}

export async function fetchMerkleAirDropperSource<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MerkleAirDropperSource, TAddress>> {
  const maybeAccount = await fetchMaybeMerkleAirDropperSource(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMerkleAirDropperSource<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MerkleAirDropperSource, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMerkleAirDropperSource(maybeAccount);
}

export async function fetchAllMerkleAirDropperSource(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MerkleAirDropperSource>[]> {
  const maybeAccounts = await fetchAllMaybeMerkleAirDropperSource(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMerkleAirDropperSource(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MerkleAirDropperSource>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeMerkleAirDropperSource(maybeAccount)
  );
}

export function getMerkleAirDropperSourceSize(): number {
  return 185;
}
