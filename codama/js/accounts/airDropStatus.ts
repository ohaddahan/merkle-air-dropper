/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export const AIR_DROP_STATUS_DISCRIMINATOR = new Uint8Array([
  207, 179, 91, 45, 210, 84, 85, 183,
]);

export function getAirDropStatusDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    AIR_DROP_STATUS_DISCRIMINATOR
  );
}

export type AirDropStatus = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  isClaimed: boolean;
  claimant: Address;
  mint: Address;
  merkleAirDropper: Address;
  claimedAt: bigint;
  amount: bigint;
};

export type AirDropStatusArgs = {
  bump: number;
  isClaimed: boolean;
  claimant: Address;
  mint: Address;
  merkleAirDropper: Address;
  claimedAt: number | bigint;
  amount: number | bigint;
};

export function getAirDropStatusEncoder(): Encoder<AirDropStatusArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['isClaimed', getBooleanEncoder()],
      ['claimant', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['merkleAirDropper', getAddressEncoder()],
      ['claimedAt', getI64Encoder()],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: AIR_DROP_STATUS_DISCRIMINATOR })
  );
}

export function getAirDropStatusDecoder(): Decoder<AirDropStatus> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['isClaimed', getBooleanDecoder()],
    ['claimant', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['merkleAirDropper', getAddressDecoder()],
    ['claimedAt', getI64Decoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getAirDropStatusCodec(): Codec<
  AirDropStatusArgs,
  AirDropStatus
> {
  return combineCodec(getAirDropStatusEncoder(), getAirDropStatusDecoder());
}

export function decodeAirDropStatus<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AirDropStatus, TAddress>;
export function decodeAirDropStatus<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AirDropStatus, TAddress>;
export function decodeAirDropStatus<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AirDropStatus, TAddress> | MaybeAccount<AirDropStatus, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAirDropStatusDecoder()
  );
}

export async function fetchAirDropStatus<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AirDropStatus, TAddress>> {
  const maybeAccount = await fetchMaybeAirDropStatus(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAirDropStatus<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AirDropStatus, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAirDropStatus(maybeAccount);
}

export async function fetchAllAirDropStatus(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AirDropStatus>[]> {
  const maybeAccounts = await fetchAllMaybeAirDropStatus(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAirDropStatus(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AirDropStatus>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAirDropStatus(maybeAccount));
}

export function getAirDropStatusSize(): number {
  return 122;
}
