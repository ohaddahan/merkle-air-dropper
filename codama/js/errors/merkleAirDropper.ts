/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { MERKLE_AIR_DROPPER_PROGRAM_ADDRESS } from '../programs';

/** NumericalOverflow: Numerical Overflow */
export const MERKLE_AIR_DROPPER_ERROR__NUMERICAL_OVERFLOW = 0x1770; // 6000
/** CannotValidateProof: Cannot Validate Proof. */
export const MERKLE_AIR_DROPPER_ERROR__CANNOT_VALIDATE_PROOF = 0x1771; // 6001
/** InvalidProof: Invalid Merkle proof. */
export const MERKLE_AIR_DROPPER_ERROR__INVALID_PROOF = 0x1772; // 6002
/** InvalidProofLength: Invalid Proof Length. */
export const MERKLE_AIR_DROPPER_ERROR__INVALID_PROOF_LENGTH = 0x1773; // 6003
/** DropAlreadyClaimed: Drop already claimed. */
export const MERKLE_AIR_DROPPER_ERROR__DROP_ALREADY_CLAIMED = 0x1774; // 6004
/** ExceededMaxClaim: Exceeded maximum claim amount. */
export const MERKLE_AIR_DROPPER_ERROR__EXCEEDED_MAX_CLAIM = 0x1775; // 6005
/** ExceededMaxNumNodes: Exceeded maximum number of claimed nodes. */
export const MERKLE_AIR_DROPPER_ERROR__EXCEEDED_MAX_NUM_NODES = 0x1776; // 6006
/** Unauthorized: Account is not authorized to execute this instruction */
export const MERKLE_AIR_DROPPER_ERROR__UNAUTHORIZED = 0x1777; // 6007
/** OwnerMismatch: Token account owner did not match intended owner */
export const MERKLE_AIR_DROPPER_ERROR__OWNER_MISMATCH = 0x1778; // 6008
/** BadMath: Bad math */
export const MERKLE_AIR_DROPPER_ERROR__BAD_MATH = 0x1779; // 6009

export type MerkleAirDropperError =
  | typeof MERKLE_AIR_DROPPER_ERROR__BAD_MATH
  | typeof MERKLE_AIR_DROPPER_ERROR__CANNOT_VALIDATE_PROOF
  | typeof MERKLE_AIR_DROPPER_ERROR__DROP_ALREADY_CLAIMED
  | typeof MERKLE_AIR_DROPPER_ERROR__EXCEEDED_MAX_CLAIM
  | typeof MERKLE_AIR_DROPPER_ERROR__EXCEEDED_MAX_NUM_NODES
  | typeof MERKLE_AIR_DROPPER_ERROR__INVALID_PROOF
  | typeof MERKLE_AIR_DROPPER_ERROR__INVALID_PROOF_LENGTH
  | typeof MERKLE_AIR_DROPPER_ERROR__NUMERICAL_OVERFLOW
  | typeof MERKLE_AIR_DROPPER_ERROR__OWNER_MISMATCH
  | typeof MERKLE_AIR_DROPPER_ERROR__UNAUTHORIZED;

let merkleAirDropperErrorMessages:
  | Record<MerkleAirDropperError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  merkleAirDropperErrorMessages = {
    [MERKLE_AIR_DROPPER_ERROR__BAD_MATH]: `Bad math`,
    [MERKLE_AIR_DROPPER_ERROR__CANNOT_VALIDATE_PROOF]: `Cannot Validate Proof.`,
    [MERKLE_AIR_DROPPER_ERROR__DROP_ALREADY_CLAIMED]: `Drop already claimed.`,
    [MERKLE_AIR_DROPPER_ERROR__EXCEEDED_MAX_CLAIM]: `Exceeded maximum claim amount.`,
    [MERKLE_AIR_DROPPER_ERROR__EXCEEDED_MAX_NUM_NODES]: `Exceeded maximum number of claimed nodes.`,
    [MERKLE_AIR_DROPPER_ERROR__INVALID_PROOF]: `Invalid Merkle proof.`,
    [MERKLE_AIR_DROPPER_ERROR__INVALID_PROOF_LENGTH]: `Invalid Proof Length.`,
    [MERKLE_AIR_DROPPER_ERROR__NUMERICAL_OVERFLOW]: `Numerical Overflow`,
    [MERKLE_AIR_DROPPER_ERROR__OWNER_MISMATCH]: `Token account owner did not match intended owner`,
    [MERKLE_AIR_DROPPER_ERROR__UNAUTHORIZED]: `Account is not authorized to execute this instruction`,
  };
}

export function getMerkleAirDropperErrorMessage(
  code: MerkleAirDropperError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      merkleAirDropperErrorMessages as Record<MerkleAirDropperError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isMerkleAirDropperError<
  TProgramErrorCode extends MerkleAirDropperError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    MERKLE_AIR_DROPPER_PROGRAM_ADDRESS,
    code
  );
}
