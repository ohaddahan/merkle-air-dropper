/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateMerkleAirDropperSourceArgs,
  createMerkleAirDropperSourceArgsBeet,
} from '../types/CreateMerkleAirDropperSourceArgs'

/**
 * @category Instructions
 * @category CreateMerkleAirDropperSource
 * @category generated
 */
export type CreateMerkleAirDropperSourceInstructionArgs = {
  args: CreateMerkleAirDropperSourceArgs
}
/**
 * @category Instructions
 * @category CreateMerkleAirDropperSource
 * @category generated
 */
export const createMerkleAirDropperSourceStruct = new beet.BeetArgsStruct<
  CreateMerkleAirDropperSourceInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createMerkleAirDropperSourceArgsBeet],
  ],
  'CreateMerkleAirDropperSourceInstructionArgs'
)
/**
 * Accounts required by the _createMerkleAirDropperSource_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] signerTokenAccount
 * @property [_writable_] merkleAirDropperSource
 * @property [_writable_] merkleAirDropperSourceTokenAccount
 * @property [] mint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category CreateMerkleAirDropperSource
 * @category generated
 */
export type CreateMerkleAirDropperSourceInstructionAccounts = {
  signer: web3.PublicKey
  signerTokenAccount: web3.PublicKey
  merkleAirDropperSource: web3.PublicKey
  merkleAirDropperSourceTokenAccount: web3.PublicKey
  mint: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createMerkleAirDropperSourceInstructionDiscriminator = [
  8, 61, 14, 197, 54, 52, 183, 61,
]

/**
 * Creates a _CreateMerkleAirDropperSource_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateMerkleAirDropperSource
 * @category generated
 */
export function createCreateMerkleAirDropperSourceInstruction(
  accounts: CreateMerkleAirDropperSourceInstructionAccounts,
  args: CreateMerkleAirDropperSourceInstructionArgs,
  programId = new web3.PublicKey('6yGnfw6ahHDQXequrUaQNv6UxbdmceQYGvZUtFDFrHqR')
) {
  const [data] = createMerkleAirDropperSourceStruct.serialize({
    instructionDiscriminator:
      createMerkleAirDropperSourceInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.signerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleAirDropperSource,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleAirDropperSourceTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
