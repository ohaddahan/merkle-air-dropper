/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  ClaimAirDropArgs,
  claimAirDropArgsBeet,
} from '../types/ClaimAirDropArgs'

/**
 * @category Instructions
 * @category ClaimAirDrop
 * @category generated
 */
export type ClaimAirDropInstructionArgs = {
  args: ClaimAirDropArgs
}
/**
 * @category Instructions
 * @category ClaimAirDrop
 * @category generated
 */
export const claimAirDropStruct = new beet.FixableBeetArgsStruct<
  ClaimAirDropInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', claimAirDropArgsBeet],
  ],
  'ClaimAirDropInstructionArgs'
)
/**
 * Accounts required by the _claimAirDrop_ instruction
 *
 * @property [_writable_, **signer**] claimant
 * @property [_writable_] claimantTokenAccount
 * @property [_writable_] merkleAirDropper
 * @property [_writable_] merkleAirDropperTokenAccount
 * @property [_writable_] claimAirDropStatus
 * @property [] mint
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category ClaimAirDrop
 * @category generated
 */
export type ClaimAirDropInstructionAccounts = {
  claimant: web3.PublicKey
  claimantTokenAccount: web3.PublicKey
  merkleAirDropper: web3.PublicKey
  merkleAirDropperTokenAccount: web3.PublicKey
  claimAirDropStatus: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  mint: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const claimAirDropInstructionDiscriminator = [
  59, 160, 181, 88, 128, 119, 58, 53,
]

/**
 * Creates a _ClaimAirDrop_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ClaimAirDrop
 * @category generated
 */
export function createClaimAirDropInstruction(
  accounts: ClaimAirDropInstructionAccounts,
  args: ClaimAirDropInstructionArgs,
  programId = new web3.PublicKey('J5qyvFxq8JprXYyo4n5qGZ8cYuCZUKi6wEzuSmDTPEgB')
) {
  const [data] = claimAirDropStruct.serialize({
    instructionDiscriminator: claimAirDropInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.claimant,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.claimantTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleAirDropper,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleAirDropperTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.claimAirDropStatus,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
